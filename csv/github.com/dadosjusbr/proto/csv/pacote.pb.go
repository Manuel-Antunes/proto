// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pacote.proto

package csv

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ContraCheque_CSV_Tipo int32

const (
	ContraCheque_CSV_MEMBRO   ContraCheque_CSV_Tipo = 0
	ContraCheque_CSV_SERVIDOR ContraCheque_CSV_Tipo = 1
)

var ContraCheque_CSV_Tipo_name = map[int32]string{
	0: "MEMBRO",
	1: "SERVIDOR",
}

var ContraCheque_CSV_Tipo_value = map[string]int32{
	"MEMBRO":   0,
	"SERVIDOR": 1,
}

func (x ContraCheque_CSV_Tipo) String() string {
	return proto.EnumName(ContraCheque_CSV_Tipo_name, int32(x))
}

func (ContraCheque_CSV_Tipo) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b95a802195d2ee58, []int{3, 0}
}

type Remuneracao_CSV_Natureza int32

const (
	Remuneracao_CSV_R Remuneracao_CSV_Natureza = 0
	Remuneracao_CSV_D Remuneracao_CSV_Natureza = 1
)

var Remuneracao_CSV_Natureza_name = map[int32]string{
	0: "R",
	1: "D",
}

var Remuneracao_CSV_Natureza_value = map[string]int32{
	"R": 0,
	"D": 1,
}

func (x Remuneracao_CSV_Natureza) String() string {
	return proto.EnumName(Remuneracao_CSV_Natureza_name, int32(x))
}

func (Remuneracao_CSV_Natureza) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b95a802195d2ee58, []int{5, 0}
}

// Estrutura com informações pertencentes a execução da coleta dos dados.
type ResultadoColeta_CSV struct {
	Coleta               *Coleta_CSV           `protobuf:"bytes,1,opt,name=coleta,proto3" json:"coleta,omitempty"`
	Remuneracoes         *Remuneracoes_CSV     `protobuf:"bytes,2,opt,name=remuneracoes,proto3" json:"remuneracoes,omitempty"`
	Folha                *FolhaDePagamento_CSV `protobuf:"bytes,3,opt,name=folha,proto3" json:"folha,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ResultadoColeta_CSV) Reset()         { *m = ResultadoColeta_CSV{} }
func (m *ResultadoColeta_CSV) String() string { return proto.CompactTextString(m) }
func (*ResultadoColeta_CSV) ProtoMessage()    {}
func (*ResultadoColeta_CSV) Descriptor() ([]byte, []int) {
	return fileDescriptor_b95a802195d2ee58, []int{0}
}

func (m *ResultadoColeta_CSV) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultadoColeta_CSV.Unmarshal(m, b)
}
func (m *ResultadoColeta_CSV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultadoColeta_CSV.Marshal(b, m, deterministic)
}
func (m *ResultadoColeta_CSV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultadoColeta_CSV.Merge(m, src)
}
func (m *ResultadoColeta_CSV) XXX_Size() int {
	return xxx_messageInfo_ResultadoColeta_CSV.Size(m)
}
func (m *ResultadoColeta_CSV) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultadoColeta_CSV.DiscardUnknown(m)
}

var xxx_messageInfo_ResultadoColeta_CSV proto.InternalMessageInfo

func (m *ResultadoColeta_CSV) GetColeta() *Coleta_CSV {
	if m != nil {
		return m.Coleta
	}
	return nil
}

func (m *ResultadoColeta_CSV) GetRemuneracoes() *Remuneracoes_CSV {
	if m != nil {
		return m.Remuneracoes
	}
	return nil
}

func (m *ResultadoColeta_CSV) GetFolha() *FolhaDePagamento_CSV {
	if m != nil {
		return m.Folha
	}
	return nil
}

// Estrutura com informações pertencentes a coleta dos dados referentes a um órgão-mes-ano
type Coleta_CSV struct {
	ChaveColeta          string               `protobuf:"bytes,1,opt,name=chave_coleta,json=chaveColeta,proto3" json:"chave_coleta,omitempty"`
	Orgao                string               `protobuf:"bytes,2,opt,name=orgao,proto3" json:"orgao,omitempty"`
	Mes                  int32                `protobuf:"varint,3,opt,name=mes,proto3" json:"mes,omitempty"`
	Ano                  int32                `protobuf:"varint,4,opt,name=ano,proto3" json:"ano,omitempty"`
	TimestampColeta      *timestamp.Timestamp `protobuf:"bytes,5,opt,name=timestamp_coleta,json=timestampColeta,proto3" json:"timestamp_coleta,omitempty"`
	RepositorioColetor   string               `protobuf:"bytes,6,opt,name=repositorio_coletor,json=repositorioColetor,proto3" json:"repositorio_coletor,omitempty"`
	VersaoColetor        string               `protobuf:"bytes,7,opt,name=versao_coletor,json=versaoColetor,proto3" json:"versao_coletor,omitempty"`
	DirColetor           string               `protobuf:"bytes,8,opt,name=dir_coletor,json=dirColetor,proto3" json:"dir_coletor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Coleta_CSV) Reset()         { *m = Coleta_CSV{} }
func (m *Coleta_CSV) String() string { return proto.CompactTextString(m) }
func (*Coleta_CSV) ProtoMessage()    {}
func (*Coleta_CSV) Descriptor() ([]byte, []int) {
	return fileDescriptor_b95a802195d2ee58, []int{1}
}

func (m *Coleta_CSV) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Coleta_CSV.Unmarshal(m, b)
}
func (m *Coleta_CSV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Coleta_CSV.Marshal(b, m, deterministic)
}
func (m *Coleta_CSV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coleta_CSV.Merge(m, src)
}
func (m *Coleta_CSV) XXX_Size() int {
	return xxx_messageInfo_Coleta_CSV.Size(m)
}
func (m *Coleta_CSV) XXX_DiscardUnknown() {
	xxx_messageInfo_Coleta_CSV.DiscardUnknown(m)
}

var xxx_messageInfo_Coleta_CSV proto.InternalMessageInfo

func (m *Coleta_CSV) GetChaveColeta() string {
	if m != nil {
		return m.ChaveColeta
	}
	return ""
}

func (m *Coleta_CSV) GetOrgao() string {
	if m != nil {
		return m.Orgao
	}
	return ""
}

func (m *Coleta_CSV) GetMes() int32 {
	if m != nil {
		return m.Mes
	}
	return 0
}

func (m *Coleta_CSV) GetAno() int32 {
	if m != nil {
		return m.Ano
	}
	return 0
}

func (m *Coleta_CSV) GetTimestampColeta() *timestamp.Timestamp {
	if m != nil {
		return m.TimestampColeta
	}
	return nil
}

func (m *Coleta_CSV) GetRepositorioColetor() string {
	if m != nil {
		return m.RepositorioColetor
	}
	return ""
}

func (m *Coleta_CSV) GetVersaoColetor() string {
	if m != nil {
		return m.VersaoColetor
	}
	return ""
}

func (m *Coleta_CSV) GetDirColetor() string {
	if m != nil {
		return m.DirColetor
	}
	return ""
}

// Estrutura que faz referência a uma lista de contra-cheques
type FolhaDePagamento_CSV struct {
	ContraCheque         []*ContraCheque_CSV `protobuf:"bytes,1,rep,name=contra_cheque,json=contraCheque,proto3" json:"contra_cheque,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *FolhaDePagamento_CSV) Reset()         { *m = FolhaDePagamento_CSV{} }
func (m *FolhaDePagamento_CSV) String() string { return proto.CompactTextString(m) }
func (*FolhaDePagamento_CSV) ProtoMessage()    {}
func (*FolhaDePagamento_CSV) Descriptor() ([]byte, []int) {
	return fileDescriptor_b95a802195d2ee58, []int{2}
}

func (m *FolhaDePagamento_CSV) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FolhaDePagamento_CSV.Unmarshal(m, b)
}
func (m *FolhaDePagamento_CSV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FolhaDePagamento_CSV.Marshal(b, m, deterministic)
}
func (m *FolhaDePagamento_CSV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FolhaDePagamento_CSV.Merge(m, src)
}
func (m *FolhaDePagamento_CSV) XXX_Size() int {
	return xxx_messageInfo_FolhaDePagamento_CSV.Size(m)
}
func (m *FolhaDePagamento_CSV) XXX_DiscardUnknown() {
	xxx_messageInfo_FolhaDePagamento_CSV.DiscardUnknown(m)
}

var xxx_messageInfo_FolhaDePagamento_CSV proto.InternalMessageInfo

func (m *FolhaDePagamento_CSV) GetContraCheque() []*ContraCheque_CSV {
	if m != nil {
		return m.ContraCheque
	}
	return nil
}

// Estrutura que faz referência a uma linha de contra-cheque em um órgão-mes-ano
type ContraCheque_CSV struct {
	IdContraCheque       string                `protobuf:"bytes,1,opt,name=id_contra_cheque,json=idContraCheque,proto3" json:"id_contra_cheque,omitempty"`
	ChaveColeta          string                `protobuf:"bytes,2,opt,name=chave_coleta,json=chaveColeta,proto3" json:"chave_coleta,omitempty"`
	Nome                 string                `protobuf:"bytes,3,opt,name=nome,proto3" json:"nome,omitempty"`
	Matricula            string                `protobuf:"bytes,4,opt,name=matricula,proto3" json:"matricula,omitempty"`
	Funcao               string                `protobuf:"bytes,5,opt,name=funcao,proto3" json:"funcao,omitempty"`
	LocalTrabalho        string                `protobuf:"bytes,6,opt,name=local_trabalho,json=localTrabalho,proto3" json:"local_trabalho,omitempty"`
	Tipo                 ContraCheque_CSV_Tipo `protobuf:"varint,7,opt,name=tipo,proto3,enum=ContraCheque_CSV_Tipo" json:"tipo,omitempty"`
	Ativo                bool                  `protobuf:"varint,8,opt,name=ativo,proto3" json:"ativo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ContraCheque_CSV) Reset()         { *m = ContraCheque_CSV{} }
func (m *ContraCheque_CSV) String() string { return proto.CompactTextString(m) }
func (*ContraCheque_CSV) ProtoMessage()    {}
func (*ContraCheque_CSV) Descriptor() ([]byte, []int) {
	return fileDescriptor_b95a802195d2ee58, []int{3}
}

func (m *ContraCheque_CSV) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContraCheque_CSV.Unmarshal(m, b)
}
func (m *ContraCheque_CSV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContraCheque_CSV.Marshal(b, m, deterministic)
}
func (m *ContraCheque_CSV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContraCheque_CSV.Merge(m, src)
}
func (m *ContraCheque_CSV) XXX_Size() int {
	return xxx_messageInfo_ContraCheque_CSV.Size(m)
}
func (m *ContraCheque_CSV) XXX_DiscardUnknown() {
	xxx_messageInfo_ContraCheque_CSV.DiscardUnknown(m)
}

var xxx_messageInfo_ContraCheque_CSV proto.InternalMessageInfo

func (m *ContraCheque_CSV) GetIdContraCheque() string {
	if m != nil {
		return m.IdContraCheque
	}
	return ""
}

func (m *ContraCheque_CSV) GetChaveColeta() string {
	if m != nil {
		return m.ChaveColeta
	}
	return ""
}

func (m *ContraCheque_CSV) GetNome() string {
	if m != nil {
		return m.Nome
	}
	return ""
}

func (m *ContraCheque_CSV) GetMatricula() string {
	if m != nil {
		return m.Matricula
	}
	return ""
}

func (m *ContraCheque_CSV) GetFuncao() string {
	if m != nil {
		return m.Funcao
	}
	return ""
}

func (m *ContraCheque_CSV) GetLocalTrabalho() string {
	if m != nil {
		return m.LocalTrabalho
	}
	return ""
}

func (m *ContraCheque_CSV) GetTipo() ContraCheque_CSV_Tipo {
	if m != nil {
		return m.Tipo
	}
	return ContraCheque_CSV_MEMBRO
}

func (m *ContraCheque_CSV) GetAtivo() bool {
	if m != nil {
		return m.Ativo
	}
	return false
}

// Estrutura que faz referência a uma lista de Remunerações
type Remuneracoes_CSV struct {
	Remuneracao          []*Remuneracao_CSV `protobuf:"bytes,1,rep,name=remuneracao,proto3" json:"remuneracao,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Remuneracoes_CSV) Reset()         { *m = Remuneracoes_CSV{} }
func (m *Remuneracoes_CSV) String() string { return proto.CompactTextString(m) }
func (*Remuneracoes_CSV) ProtoMessage()    {}
func (*Remuneracoes_CSV) Descriptor() ([]byte, []int) {
	return fileDescriptor_b95a802195d2ee58, []int{4}
}

func (m *Remuneracoes_CSV) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Remuneracoes_CSV.Unmarshal(m, b)
}
func (m *Remuneracoes_CSV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Remuneracoes_CSV.Marshal(b, m, deterministic)
}
func (m *Remuneracoes_CSV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Remuneracoes_CSV.Merge(m, src)
}
func (m *Remuneracoes_CSV) XXX_Size() int {
	return xxx_messageInfo_Remuneracoes_CSV.Size(m)
}
func (m *Remuneracoes_CSV) XXX_DiscardUnknown() {
	xxx_messageInfo_Remuneracoes_CSV.DiscardUnknown(m)
}

var xxx_messageInfo_Remuneracoes_CSV proto.InternalMessageInfo

func (m *Remuneracoes_CSV) GetRemuneracao() []*Remuneracao_CSV {
	if m != nil {
		return m.Remuneracao
	}
	return nil
}

// Estrutura que faz referência a uma linha de remuneração em um órgão-mes-ano
type Remuneracao_CSV struct {
	IdContraCheque       string                   `protobuf:"bytes,1,opt,name=id_contra_cheque,json=idContraCheque,proto3" json:"id_contra_cheque,omitempty"`
	ChaveColeta          string                   `protobuf:"bytes,2,opt,name=chave_coleta,json=chaveColeta,proto3" json:"chave_coleta,omitempty"`
	Natureza             Remuneracao_CSV_Natureza `protobuf:"varint,3,opt,name=natureza,proto3,enum=Remuneracao_CSV_Natureza" json:"natureza,omitempty"`
	Categoria            string                   `protobuf:"bytes,4,opt,name=categoria,proto3" json:"categoria,omitempty"`
	Item                 string                   `protobuf:"bytes,5,opt,name=item,proto3" json:"item,omitempty"`
	Valor                float64                  `protobuf:"fixed64,6,opt,name=valor,proto3" json:"valor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *Remuneracao_CSV) Reset()         { *m = Remuneracao_CSV{} }
func (m *Remuneracao_CSV) String() string { return proto.CompactTextString(m) }
func (*Remuneracao_CSV) ProtoMessage()    {}
func (*Remuneracao_CSV) Descriptor() ([]byte, []int) {
	return fileDescriptor_b95a802195d2ee58, []int{5}
}

func (m *Remuneracao_CSV) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Remuneracao_CSV.Unmarshal(m, b)
}
func (m *Remuneracao_CSV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Remuneracao_CSV.Marshal(b, m, deterministic)
}
func (m *Remuneracao_CSV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Remuneracao_CSV.Merge(m, src)
}
func (m *Remuneracao_CSV) XXX_Size() int {
	return xxx_messageInfo_Remuneracao_CSV.Size(m)
}
func (m *Remuneracao_CSV) XXX_DiscardUnknown() {
	xxx_messageInfo_Remuneracao_CSV.DiscardUnknown(m)
}

var xxx_messageInfo_Remuneracao_CSV proto.InternalMessageInfo

func (m *Remuneracao_CSV) GetIdContraCheque() string {
	if m != nil {
		return m.IdContraCheque
	}
	return ""
}

func (m *Remuneracao_CSV) GetChaveColeta() string {
	if m != nil {
		return m.ChaveColeta
	}
	return ""
}

func (m *Remuneracao_CSV) GetNatureza() Remuneracao_CSV_Natureza {
	if m != nil {
		return m.Natureza
	}
	return Remuneracao_CSV_R
}

func (m *Remuneracao_CSV) GetCategoria() string {
	if m != nil {
		return m.Categoria
	}
	return ""
}

func (m *Remuneracao_CSV) GetItem() string {
	if m != nil {
		return m.Item
	}
	return ""
}

func (m *Remuneracao_CSV) GetValor() float64 {
	if m != nil {
		return m.Valor
	}
	return 0
}

func init() {
	proto.RegisterEnum("ContraCheque_CSV_Tipo", ContraCheque_CSV_Tipo_name, ContraCheque_CSV_Tipo_value)
	proto.RegisterEnum("Remuneracao_CSV_Natureza", Remuneracao_CSV_Natureza_name, Remuneracao_CSV_Natureza_value)
	proto.RegisterType((*ResultadoColeta_CSV)(nil), "ResultadoColeta_CSV")
	proto.RegisterType((*Coleta_CSV)(nil), "Coleta_CSV")
	proto.RegisterType((*FolhaDePagamento_CSV)(nil), "FolhaDePagamento_CSV")
	proto.RegisterType((*ContraCheque_CSV)(nil), "ContraCheque_CSV")
	proto.RegisterType((*Remuneracoes_CSV)(nil), "Remuneracoes_CSV")
	proto.RegisterType((*Remuneracao_CSV)(nil), "Remuneracao_CSV")
}

func init() { proto.RegisterFile("pacote.proto", fileDescriptor_b95a802195d2ee58) }

var fileDescriptor_b95a802195d2ee58 = []byte{
	// 621 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xc1, 0x4f, 0xdb, 0x3e,
	0x14, 0xc7, 0x49, 0x69, 0xfb, 0x6b, 0x5f, 0x4b, 0xc9, 0xcf, 0x30, 0xd4, 0xa1, 0x49, 0xb0, 0x20,
	0x24, 0xb4, 0x49, 0xa9, 0xd4, 0x89, 0x5d, 0x76, 0xa3, 0x80, 0xb4, 0x03, 0x30, 0x19, 0xc4, 0x61,
	0x97, 0xea, 0xd5, 0x35, 0xad, 0xa7, 0x24, 0xaf, 0x73, 0x9c, 0x1e, 0xf6, 0xc7, 0xec, 0xbe, 0xfb,
	0xfe, 0xb7, 0x5d, 0xa7, 0xd8, 0x69, 0x9a, 0x95, 0x1d, 0x77, 0xaa, 0xdf, 0xd7, 0x1f, 0x3b, 0x4f,
	0xdf, 0xaf, 0x5f, 0xa1, 0xbb, 0x40, 0x41, 0x46, 0x86, 0x0b, 0x4d, 0x86, 0x0e, 0x8f, 0x66, 0x44,
	0xb3, 0x48, 0x0e, 0x6c, 0x35, 0xc9, 0x9e, 0x06, 0x46, 0xc5, 0x32, 0x35, 0x18, 0x2f, 0x1c, 0x10,
	0x7c, 0xf7, 0x60, 0x8f, 0xcb, 0x34, 0x8b, 0x0c, 0x4e, 0x69, 0x44, 0x91, 0x34, 0x38, 0x1e, 0xdd,
	0x3f, 0xb2, 0x13, 0x68, 0x0a, 0x5b, 0xf5, 0xbd, 0x63, 0xef, 0xac, 0x33, 0xec, 0x84, 0xeb, 0x4d,
	0x5e, 0x6c, 0xb1, 0x73, 0xe8, 0x6a, 0x19, 0x67, 0x89, 0xd4, 0x28, 0x48, 0xa6, 0xfd, 0x9a, 0x45,
	0xff, 0x0f, 0x79, 0x45, 0xb4, 0x07, 0xfe, 0xc0, 0xd8, 0x5b, 0x68, 0x3c, 0x51, 0x34, 0xc7, 0xfe,
	0xb6, 0xe5, 0x5f, 0x84, 0xd7, 0x79, 0x75, 0x29, 0x3f, 0xe1, 0x0c, 0x63, 0x99, 0x18, 0xb2, 0x67,
	0x1c, 0x13, 0xfc, 0xa8, 0x01, 0x54, 0xfa, 0x7a, 0x0d, 0x5d, 0x31, 0xc7, 0xa5, 0x1c, 0x57, 0xba,
	0x6b, 0xf3, 0x8e, 0xd5, 0x1c, 0xc6, 0xf6, 0xa1, 0x41, 0x7a, 0x86, 0x64, 0xdb, 0x69, 0x73, 0x57,
	0x30, 0x1f, 0xb6, 0x63, 0x99, 0xda, 0x4f, 0x36, 0x78, 0xbe, 0xcc, 0x15, 0x4c, 0xa8, 0x5f, 0x77,
	0x0a, 0x26, 0xc4, 0xae, 0xc0, 0x2f, 0xfd, 0x59, 0x7d, 0xa0, 0x61, 0x7b, 0x3c, 0x0c, 0x9d, 0x91,
	0xe1, 0xca, 0xc8, 0xf0, 0x61, 0x05, 0xf2, 0xdd, 0xf2, 0x4c, 0xd1, 0xc0, 0x00, 0xf6, 0xb4, 0x5c,
	0x50, 0xaa, 0x0c, 0x69, 0x45, 0xee, 0x22, 0xd2, 0xfd, 0xa6, 0x6d, 0x87, 0x55, 0xb6, 0x46, 0x6e,
	0x87, 0x9d, 0x42, 0x6f, 0x29, 0x75, 0x8a, 0x6b, 0xf6, 0x3f, 0xcb, 0xee, 0x38, 0x75, 0x85, 0x1d,
	0x41, 0x67, 0xaa, 0x74, 0xc9, 0xb4, 0x2c, 0x03, 0x53, 0xa5, 0x0b, 0x20, 0xb8, 0x85, 0xfd, 0xbf,
	0x59, 0xc9, 0xde, 0xc3, 0x8e, 0xa0, 0xc4, 0x68, 0x1c, 0x8b, 0xb9, 0xfc, 0x9a, 0xc9, 0xbe, 0x77,
	0xbc, 0x6d, 0x83, 0x1a, 0x59, 0x75, 0x64, 0x45, 0x17, 0x94, 0xa8, 0x28, 0xc1, 0xcf, 0x1a, 0xf8,
	0x9b, 0x08, 0x3b, 0x03, 0x5f, 0x4d, 0xc7, 0x9b, 0xf7, 0xe5, 0xad, 0xf4, 0xd4, 0xb4, 0x4a, 0x3f,
	0xcb, 0xaa, 0xf6, 0x3c, 0x2b, 0x06, 0xf5, 0x84, 0x62, 0x69, 0x63, 0x69, 0x73, 0xbb, 0x66, 0xaf,
	0xa0, 0x1d, 0xa3, 0xd1, 0x4a, 0x64, 0x11, 0xda, 0x74, 0xda, 0x7c, 0x2d, 0xb0, 0x03, 0x68, 0x3e,
	0x65, 0x89, 0x40, 0xb2, 0xc9, 0xb4, 0x79, 0x51, 0xe5, 0x1e, 0x46, 0x24, 0x30, 0x1a, 0x1b, 0x8d,
	0x13, 0x8c, 0xe6, 0x54, 0xf8, 0xbd, 0x63, 0xd5, 0x87, 0x42, 0x64, 0x6f, 0xa0, 0x6e, 0xd4, 0x82,
	0xac, 0xc1, 0xbd, 0xe1, 0xc1, 0x33, 0x07, 0xc2, 0x07, 0xb5, 0x20, 0x6e, 0x99, 0xfc, 0x21, 0xa1,
	0x51, 0x4b, 0xb2, 0x4e, 0xb7, 0xb8, 0x2b, 0x82, 0x63, 0xa8, 0xe7, 0x0c, 0x03, 0x68, 0xde, 0x5c,
	0xdd, 0x5c, 0xf0, 0x3b, 0x7f, 0x8b, 0x75, 0xa1, 0x75, 0x7f, 0xc5, 0x1f, 0x3f, 0x5e, 0xde, 0x71,
	0xdf, 0x0b, 0xae, 0xc1, 0xdf, 0x9c, 0x00, 0x36, 0x84, 0x4e, 0x39, 0x03, 0x48, 0x45, 0x00, 0xfe,
	0x7a, 0x52, 0xd0, 0x3d, 0xfa, 0x2a, 0x14, 0xfc, 0xf2, 0x60, 0x77, 0x03, 0xf8, 0xb7, 0xee, 0x9f,
	0x43, 0x2b, 0x41, 0x93, 0x69, 0xf9, 0xcd, 0xcd, 0x62, 0x6f, 0xf8, 0x72, 0xb3, 0xa3, 0xf0, 0xb6,
	0x00, 0x78, 0x89, 0xe6, 0x01, 0x09, 0x34, 0x72, 0x46, 0x5a, 0x95, 0x01, 0x95, 0x42, 0x1e, 0xa9,
	0x32, 0x32, 0x2e, 0xe2, 0xb1, 0xeb, 0xdc, 0xc9, 0x25, 0x46, 0xc5, 0x0c, 0x78, 0xdc, 0x15, 0x41,
	0x1f, 0x5a, 0xab, 0xdb, 0x59, 0x03, 0x3c, 0xee, 0x6f, 0xe5, 0x3f, 0x97, 0xbe, 0x77, 0x71, 0xfa,
	0xf9, 0x64, 0xa6, 0xcc, 0x3c, 0x9b, 0x84, 0x82, 0xe2, 0xc1, 0x14, 0xa7, 0x94, 0x7e, 0xc9, 0xd2,
	0x89, 0x76, 0xff, 0x63, 0x03, 0x91, 0x2e, 0x3f, 0x88, 0x74, 0x39, 0x69, 0xda, 0xf2, 0xdd, 0xef,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x31, 0xc2, 0xc9, 0xf4, 0x04, 0x00, 0x00,
}
